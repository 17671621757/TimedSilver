//
//  Dictionary+TSExtension.swift
//  TimedSilver
//  Source: https://github.com/hilen/TimedSilver
//
//  Created by Hilen on 11/23/15.
//  Copyright Â© 2015 Hilen. All rights reserved.
//

import Foundation

public extension Dictionary {
    /// Merges the dictionary with dictionaries passed. The latter dictionaries will override
    /// values of the keys that are already set
    ///
    /// :param dictionaries A comma seperated list of dictionaries
    mutating func ts_merge<K, V>(dictionaries: Dictionary<K, V>...) {
        for dict in dictionaries {
            for (key, value) in dict {
                self.updateValue(value as! Value, forKey: key as! Key)
            }
        }
    }
    
    func ts_combine(targetDictionary: Dictionary<String, AnyObject>, resultDictionary: Dictionary<String, AnyObject>) -> Dictionary<String, AnyObject> {
        var temp = resultDictionary
        for (key, value) in targetDictionary {
            temp[key] = value
        }
        return temp
    }
    
    func ts_plus<K, V>(left: Dictionary<K, V>, right: Dictionary<K, V>) -> Dictionary<K, V> {
        var map = Dictionary<K, V>()
        for (k, v) in left {
            map[k] = v
        }
        for (k, v) in right {
            map[k] = v
        }
        return map
    }
    
    //https://github.com/pNre/ExSwift/blob/master/ExSwift/Dictionary.swift
    /**
     Creates an Array with values generated by running
     each [key: value] of self through the mapFunction.
     :param: mapFunction
     :returns: Mapped array
     */
    func ts_toArray <V> (map: (Key, Value) -> V) -> [V] {
        var mapped = [V]()
        ts_each {
            mapped.append(map($0, $1))
        }
        return mapped
    }
    
    /**
     Loops trough each [key: value] pair in self.
     
     :param: eachFunction Function to inovke on each loop
     */
    func ts_each(each: (Key, Value) -> ()) {
        for (key, value) in self {
            each(key, value)
        }
    }

    /**
     Returns a copy of self, filtered to only have values for the whitelisted keys.
     
     :param: keys Whitelisted keys
     :returns: Filtered dictionary
     */
    func ts_pick (keys: [Key]) -> Dictionary {
        return ts_filter { (key: Key, _) -> Bool in
            return keys.contains(key)
        }
    }
    
    /**
     Constructs a dictionary containing every [key: value] pair from self
     for which testFunction evaluates to true.
     
     :param: testFunction Function called to test each key, value
     :returns: Filtered dictionary
     */
    func ts_filter (test: (Key, Value) -> Bool) -> Dictionary {
        var result = Dictionary()
        for (key, value) in self {
            if test(key, value) {
                result[key] = value
            }
        }
        return result
    }
}




